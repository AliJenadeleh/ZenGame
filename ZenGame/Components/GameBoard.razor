@using ZenGame.Models;
@using System.Timers;
@inject IJSRuntime js;
<div class="game-board">
    @if (IsPlaying)
    {

        <GameImage CssClasses="@ImageCssClass"
                   Src="@SelectedImage"></GameImage>

        <GameOption Caption="Japanese"
                    IsAnswering="IsAnswering"
                    OptionSelected="Option_Selected"
                    DropCss="game-img-go-top-left"
                    CssClasses="option-top-left"></GameOption>

        <GameOption Caption="Chinese"
                    IsAnswering="IsAnswering"
                    OptionSelected="Option_Selected"
                    DropCss="game-img-go-top-right"
                    CssClasses="option-top-right"></GameOption>

        <GameOption Caption="Korean"
                    IsAnswering="IsAnswering"
                    OptionSelected="Option_Selected"
                    DropCss="game-img-go-bottom-left"
                    CssClasses="option-bottom-left"></GameOption>

        <GameOption Caption="Thai"
                    IsAnswering="IsAnswering"
                    OptionSelected="Option_Selected"
                    DropCss="game-img-go-bottom-right"
                    CssClasses="option-bottom-right"></GameOption>

    }
    else
    {

        <StartOption StartCallback="Start_Option_Clicked"></StartOption>

    }

    <ScoreBar Index="index"
              Count="count"
              Score="score"></ScoreBar>
</div>

@code {

    private Timer timer;

    private bool IsPlaying = false;
    private bool IsAnswering = false;

    private int score, index, count;

    private string SelectedImage = "";
    private string ImageCssClass = "";

    private Random Rnd;

    private List<string> Images;
    private List<string> GetImages() =>
        new List<string>() { "c-2", "c-4", "j-2", "j-3", "j-4", "k-2", "k-3", "k-4", "t-1", "t-2", "t-3", "t-4" };

    private string SelectAnImage()
    {
        string img = "";
        if (Images.Any())
        {
            int inx = Rnd.Next(0, Images.Count);
            img = Images[inx];
            Images.RemoveAt(inx);
        }

        return img;
    }

    private Timer InitTimer()
    {
        var timer = new Timer();
        timer.Interval = 5000;
        timer.Elapsed += TimerElapsed;

        return timer;
    }

    private void InitGame()
    {
        Images = GetImages();

        SelectedImage = SelectAnImage();
        ImageCssClass = "";

        index =
        score = 0;

        count = Images.Count;

        IsAnswering = true;
    }

    protected override void OnInitialized()
    {
        IsPlaying = false;

        Rnd = new Random();

        timer = InitTimer();

        base.OnInitialized();
    }

    private async void TimerElapsed(object sender, ElapsedEventArgs args)
    {
        if (IsAnswering)
            score -= 5;
        if (Images.Any())
        {
            await Start_GameStepAsync();
        }
        else
        {
            IsAnswering =
            IsPlaying = false;
            timer.Stop();
            StateHasChanged();
        }

        if (!IsAnswering)
            IsAnswering = true;
    }

    private async void Option_Selected(OptionSelectedModel Model)
    {
        IsAnswering = false;

        if (SelectedImage.ToLower()[0] == Model.Answer.ToLower()[0])
        {
            score += 20;
            ImageCssClass = Model.DirectionCss;
            StateHasChanged();
            await Task.Delay(100);
        }
        else
        {
            score -= 5;
        }
    }

    private async Task Start_GameStepAsync()
    {
        index++;
        SelectedImage = SelectAnImage();
        if (!string.IsNullOrEmpty(ImageCssClass))
        {
            ImageCssClass = "game-img-init";
            StateHasChanged();
            await Task.Delay(100);
        }

        ImageCssClass = "";
        StateHasChanged();
        await Task.Delay(100);

        ImageCssClass = "game-img-godown";
        IsAnswering = true;
        await Task.Delay(100);
        StateHasChanged();
    }

    private async void Start_Option_Clicked(bool value)
    {
        if (value)
        {
            InitGame();

            IsPlaying = true;

            await Start_GameStepAsync();

            timer.Start();
        }
    }

}
